classDiagram
    %% ====================================================================
    %% CORE DATA MODELS
    %% ====================================================================
    
    class Event {
        -String id
        -String title
        -EventType type
        -EventLocation location
        -String description
        -EventDateRange dateRange
        -Map~String, dynamic~ uniqueData
        -List~EventAttachment~ attachments
        -List~DiscussionMessage~ discussion
        +bool hasCoordinates
        +bool hasDuration
        +DateTime effectiveStartTime
        +DateTime effectiveEndTime
        +List~DiscussionMessage~ topLevelMessages
        +getRepliesTo(String messageId) List~DiscussionMessage~
        +getAttachment(String attachmentId) EventAttachment
        +copyWith(...) Event
        +fromJson(Map~String, dynamic~ json) Event
        +toJson() Map~String, dynamic~
    }
    
    class EventType {
        <<enumeration>>
        POINT
        PERIOD
        GROUPED
    }
    
    class EventLocation {
        -String name
        -double lat
        -double lng
        +bool hasCoordinates
        +fromJson(Map~String, dynamic~ json) EventLocation
        +toJson() Map~String, dynamic~
        +copyWith(...) EventLocation
    }
    
    class EventDateRange {
        -DateTime start
        -DateTime end
        +bool hasDuration
        +Duration duration
        +fromJson(Map~String, dynamic~ json) EventDateRange
        +toJson() Map~String, dynamic~
        +copyWith(...) EventDateRange
    }
    
    class EventAttachment {
        -String id
        -String file
        -String mime
        -String label
        +bool isImage
        +bool isVideo
        +bool isPdf
        +bool canPreview
        +fromJson(Map~String, dynamic~ json) EventAttachment
        +toJson() Map~String, dynamic~
        +copyWith(...) EventAttachment
    }
    
    class DiscussionMessage {
        -String id
        -String author
        -DateTime timestamp
        -String body
        -String replyTo
        -List~String~ attachments
        +bool isReply
        +fromJson(Map~String, dynamic~ json) DiscussionMessage
        +toJson() Map~String, dynamic~
        +copyWith(...) DiscussionMessage
    }
    
    class User {
        -String id
        -String firstName
        -String lastName
        -String role
        -List~String~ groupIds
        +String displayName
        +fromJson(Map~String, dynamic~ json) User
        +toJson() Map~String, dynamic~
        +copyWith(...) User
    }
    
    class Group {
        -String id
        -String label
        -String color
        +Color colorValue
        +fromJson(Map~String, dynamic~ json) Group
        +toJson() Map~String, dynamic~
        +copyWith(...) Group
    }
    
    class GroupMember {
        -String id
        -DateTime timestamp
        -Map~String, dynamic~ data
        +fromJson(Map~String, dynamic~ json) GroupMember
    }
    
    class ComparisonEventItem {
        -Event event
        -DateTime addedAt
    }
    
    %% ====================================================================
    %% STATE MANAGEMENT (BLOC PATTERN)
    %% ====================================================================
    
    class NavigationBloc {
        -NavigationState state
        +add(NavigationEvent event) void
        -_handleToggleTimeline(ToggleTimeline event, Emitter emit) void
        -_handleToggleMap(ToggleMap event, Emitter emit) void
        -_handleChangePage(ChangePage event, Emitter emit) void
        -_handleShowEventDetails(ShowEventDetails event, Emitter emit) void
        -_handleCloseEventDetails(CloseEventDetails event, Emitter emit) void
        -_handleUpdateSplitRatio(UpdateSplitRatio event, Emitter emit) void
    }
    
    class NavigationState {
        -bool showTimeline
        -bool showMap
        -int currentPageIndex
        -double splitRatio
        -double eventDetailsSplitRatio
        -double mobileSplitRatio
        -Event selectedEventForDetails
        -EventDetailsSource detailsSource
        -bool previousShowTimeline
        -bool previousShowMap
        +bool showEventDetails
        +copyWith(...) NavigationState
    }
    
    class TimelineCubit {
        -EventsRepository _eventsRepository
        -MapCubit _mapCubit
        -Timer _transformationDebounceTimer
        -Matrix4 _pendingTransformationMatrix
        +addEvent(...) Future~void~
        +loadEvents() Future~void~
        +loadTimeline() Future~void~
        +reorderRows(int fromIndex, int toIndex) void
        +updateRowHeight(int rowIndex, double newHeight) void
        +setHoveredEvent(Event event) void
        +clearHoveredEvent() void
        +scrollToEvent(Event event) void
        +selectEvent(Event event) void
        +clearSelection() void
        +saveTransformationMatrix(Matrix4 matrix) void
        +setMapCubit(MapCubit mapCubit) void
        -_buildRows(List~Event~ events) List~TimelineRow~
        -_canPlaceEventInRow(Event event, TimelineRow row) bool
        -_eventsOverlap(Event a, Event b) bool
    }
    
    class TimelineState {
        -List~Event~ events
        -DateTime visibleStart
        -DateTime visibleEnd
        -List~TimelineRow~ rows
        -Event selectedEvent
        -Event hoveredEvent
        -Event scrollToEvent
        -Matrix4 transformationMatrix
        +copyWith(...) TimelineState
    }
    
    class TimelineRow {
        -int index
        -List~Event~ events
        -double height
    }
    
    class MapCubit {
        -EventsRepository _eventsRepository
        -NavigationBloc _navigationBloc
        -TimelineCubit _timelineCubit
        +loadMapEvents() Future~void~
        +selectEvent(Event event) void
        +clearSelection() void
        +showEventPopup(Event event) void
        +showClusterPopup(List~Event~ events) void
        +nextPopupEvent() void
        +previousPopupEvent() void
        +closePopup() void
        +highlightEvent(Event event) void
        +clearHighlight() void
        +navigateToEvent(Event event) void
        +navigateToTimeline(Event event) void
        +hoverMapEvent(Event event) void
        +exitMapEventHover() void
        +updateSelectedEvent(Event event) void
    }
    
    class MapState {
        -MapStatus status
        -List~Event~ events
        -Event selectedEvent
        -Event highlightedEvent
        -List~Event~ popupEvents
        -int popupCurrentIndex
        -bool showPopup
        -Event centerOnEvent
        +copyWith(...) MapState
    }
    
    class ComparisonBloc {
        -EventsRepository _eventsRepository
        -RecentlyViewedService _recentlyViewedService
        +add(ComparisonEvent event) void
        -_onAddEventToComparison(AddEventToComparison event, Emitter emit) void
        -_onRemoveEventFromComparison(RemoveEventFromComparison event, Emitter emit) void
        -_onClearComparisonList(ClearComparisonList event, Emitter emit) void
        -_onToggleComparisonListVisibility(ToggleComparisonListVisibility event, Emitter emit) void
        -_onSearchEventsForComparison(SearchEventsForComparison event, Emitter emit) void
        -_onLoadEventsForComparison(LoadEventsForComparison event, Emitter emit) void
        -_onMarkEventAsViewed(MarkEventAsViewed event, Emitter emit) void
    }
    
    class ComparisonState {
        -List~ComparisonEventItem~ comparisonList
        -bool isFloatingListVisible
        -bool isSelectionOverlayVisible
        -ComparisonStatus status
        -String errorMessage
        -List~Event~ allEvents
        -List~Event~ recentlyViewedEvents
        -String searchQuery
        -List~Event~ searchResults
        +bool isAtMaxCapacity
        +bool canCompare
        +isEventInComparison(String eventId) bool
        +copyWith(...) ComparisonState
    }
    
    class EventVisibilityCubit {
        +togglePanel() void
        +closePanel() void
        +toggleEventType(EventType type) void
        +toggleEventVisibility(String eventId) void
        +resetFilters() void
    }
    
    class EventVisibilityState {
        -bool panelOpen
        -Set~EventType~ hiddenEventTypes
        -Set~String~ hiddenEventIds
        +copyWith(...) EventVisibilityState
    }
    
    class GroupsBloc {
        +add(GroupsEvent event) void
        +loadGroups() Future~void~
        +createGroup(String label, String color) Future~void~
        +updateGroup(String id, String label, String color) Future~void~
        +deleteGroup(String id) Future~void~
    }
    
    class UtcTimerCubit {
        -Timer _timer
        +start() void
        +stop() void
        +updateTime() void
    }
    
    class DiscussionCubit {
        -DiscussionRepository _discussionRepository
        +loadDiscussion(String eventId) Future~void~
        +addMessage(String eventId, String body, String replyTo) Future~void~
        +updateMessage(String messageId, String body) Future~void~
        +deleteMessage(String messageId) Future~void~
    }
    
    class GenericSearchBloc {
        +add(SearchEvent event) void
        +search(String query, SearchType type) void
        +clearSearch() void
    }
    
    class NavItemsCubit {
        +updateItems(List~NavItem~ items) void
        +selectItem(int index) void
    }
    
    %% ====================================================================
    %% REPOSITORY LAYER
    %% ====================================================================
    
    class EventsRepository {
        +loadEvents() Future~List~Event~~
        +loadEventsWithCoordinates() Future~List~Event~~
        +loadEvent(String eventId) Future~Event~
        +loadEventsByType(EventType type) Future~List~Event~~
        +loadEventsInDateRange(DateTime start, DateTime end) Future~List~Event~~
        +loadEventsWithRecentDiscussions() Future~List~Event~~
    }
    
    class UsersRepository {
        +loadUsers() Future~List~User~~
        +loadUser(String userId) Future~User~
        +loadUsersByGroup(String groupId) Future~List~User~~
        +createUser(User user) Future~void~
        +updateUser(User user) Future~void~
        +deleteUser(String userId) Future~void~
    }
    
    class GroupsRepository {
        +loadGroups() Future~List~Group~~
        +loadGroup(String groupId) Future~Group~
        +createGroup(Group group) Future~void~
        +updateGroup(Group group) Future~void~
        +deleteGroup(String groupId) Future~void~
    }
    
    class DiscussionRepository {
        +loadDiscussion(String eventId) Future~List~DiscussionMessage~~
        +addMessage(DiscussionMessage message) Future~void~
        +updateMessage(DiscussionMessage message) Future~void~
        +deleteMessage(String messageId) Future~void~
    }
    
    %% ====================================================================
    %% SERVICE LAYER
    %% ====================================================================
    
    class RecentlyViewedService {
        -List~Event~ _recentEvents
        +List~Event~ recentEvents
        +addEvent(Event event) void
        +loadFromStorage() Future~void~
        +clear() void
        -_saveToStorage() Future~void~
    }
    
    %% ====================================================================
    %% UI COMPONENTS
    %% ====================================================================
    
    class MyApp {
        -bool _showAddEventOverlay
        +build(BuildContext context) Widget
        -_buildBody() Widget
        -_buildMobileVerticalSplit() Widget
        -_buildFABs(NavigationState navState) List~Widget~
        -_buildSingleViewLayout(...) Widget
        -_buildEventDetailsOverlay(...) Widget
    }
    
    class TimelinePage {
        +build(BuildContext context) Widget
    }
    
    class MapPage {
        +build(BuildContext context) Widget
    }
    
    class NavigationView {
        +build(BuildContext context) Widget
    }
    
    class EventDetailsPanel {
        +build(BuildContext context) Widget
    }
    
    class ComparisonPage {
        -Widget child
        +build(BuildContext context) Widget
    }
    
    class ComparisonResultsPage {
        +build(BuildContext context) Widget
    }
    
    class ResizableSplitView {
        -Widget leftChild
        -Widget rightChild
        -double splitRatio
        -double minLeftWidth
        -double minRightWidth
        +build(BuildContext context) Widget
    }
    
    class EventVisibilityPanel {
        +build(BuildContext context) Widget
    }
    
    class AddEventOverlay {
        -Function onSubmitted
        -VoidCallback onCancel
        +build(BuildContext context) Widget
    }
    
    %% ====================================================================
    %% RELATIONSHIPS
    %% ====================================================================
    
    %% Data Model Compositions
    Event *-- EventType : has
    Event *-- EventLocation : contains
    Event *-- EventDateRange : contains
    Event *-- EventAttachment : contains_multiple
    Event *-- DiscussionMessage : contains_multiple
    Event *-- GroupMember : may_contain_multiple
    ComparisonEventItem *-- Event : wraps
    
    %% State Management Dependencies
    NavigationBloc --> NavigationState : manages
    TimelineCubit --> TimelineState : manages
    TimelineCubit --> TimelineRow : creates
    MapCubit --> MapState : manages
    ComparisonBloc --> ComparisonState : manages
    EventVisibilityCubit --> EventVisibilityState : manages
    
    %% Circular Dependencies (resolved via injection)
    TimelineCubit ..> MapCubit : references
    MapCubit ..> TimelineCubit : references
    MapCubit --> NavigationBloc : uses
    
    %% Repository Dependencies
    TimelineCubit --> EventsRepository : uses
    MapCubit --> EventsRepository : uses
    ComparisonBloc --> EventsRepository : uses
    ComparisonBloc --> RecentlyViewedService : uses
    DiscussionCubit --> DiscussionRepository : uses
    GroupsBloc --> GroupsRepository : uses
    
    %% Service Dependencies
    RecentlyViewedService --> Event : stores
    
    %% UI Component Dependencies
    MyApp --> NavigationView : contains
    MyApp --> TimelinePage : displays
    MyApp --> MapPage : displays
    MyApp --> EventDetailsPanel : displays
    MyApp --> ComparisonPage : wraps
    MyApp --> ResizableSplitView : uses
    MyApp --> AddEventOverlay : displays
    MyApp --> EventVisibilityPanel : displays
    
    %% BLoC to UI Relationships
    NavigationBloc ..> MyApp : state_provider
    TimelineCubit ..> TimelinePage : state_provider
    MapCubit ..> MapPage : state_provider
    ComparisonBloc ..> ComparisonPage : state_provider
    ComparisonBloc ..> ComparisonResultsPage : state_provider
    EventVisibilityCubit ..> EventVisibilityPanel : state_provider
    
    %% Inheritance (Equatable)
    Event --|> Equatable : extends
    EventLocation --|> Equatable : extends
    EventDateRange --|> Equatable : extends
    EventAttachment --|> Equatable : extends
    DiscussionMessage --|> Equatable : extends
    User --|> Equatable : extends
    Group --|> Equatable : extends
    GroupMember --|> Equatable : extends
    
    %% BLoC Inheritance
    NavigationBloc --|> Bloc : extends
    ComparisonBloc --|> Bloc : extends
    GroupsBloc --|> Bloc : extends
    GenericSearchBloc --|> Bloc : extends
    TimelineCubit --|> Cubit : extends
    MapCubit --|> Cubit : extends
    EventVisibilityCubit --|> Cubit : extends
    UtcTimerCubit --|> Cubit : extends
    DiscussionCubit --|> Cubit : extends
    NavItemsCubit --|> Cubit : extends
    
    %% UI Widget Inheritance
    MyApp --|> StatefulWidget : extends
    TimelinePage --|> StatelessWidget : extends
    MapPage --|> StatelessWidget : extends
    NavigationView --|> StatelessWidget : extends
    EventDetailsPanel --|> StatelessWidget : extends
    ComparisonPage --|> StatelessWidget : extends
    ComparisonResultsPage --|> StatelessWidget : extends
    ResizableSplitView --|> StatefulWidget : extends
    EventVisibilityPanel --|> StatelessWidget : extends
    AddEventOverlay --|> StatefulWidget : extends
    
    %% External Dependencies
    class Equatable {
        <<interface>>
        +props List~Object~
    }
    
    class Bloc {
        <<abstract>>
        +add(Event event) void
        +stream Stream~State~
        +state State
    }
    
    class Cubit {
        <<abstract>>
        +emit(State state) void
        +stream Stream~State~
        +state State
    }
    
    class StatefulWidget {
        <<abstract>>
        +createState() State
    }
    
    class StatelessWidget {
        <<abstract>>
        +build(BuildContext context) Widget
    }