classDiagram
    %% ====================================================================
    %% PRESENTATION LAYER
    %% ====================================================================
    
    class MyApp {
        +Main application widget
    }
    
    class TimelinePage {
        +Timeline visualization
    }
    
    class MapPage {
        +Map visualization  
    }
    
    class EventDetailsPanel {
        +Event details overlay
    }
    
    class ComparisonPage {
        +Event comparison interface
    }
    
    %% ====================================================================
    %% BUSINESS LOGIC LAYER (STATE MANAGEMENT)
    %% ====================================================================
    
    class NavigationBloc {
        -NavigationState state
        +toggleTimeline() void
        +toggleMap() void
        +showEventDetails() void
    }
    
    class TimelineCubit {
        -List~Event~ events
        +loadTimeline() void
        +selectEvent() void
    }
    
    class MapCubit {
        -List~Event~ events
        +loadMapEvents() void
        +showEventPopup() void
    }
    
    class ComparisonBloc {
        -List~Event~ comparisonList
        +addEventToComparison() void
    }
    
    class EventVisibilityCubit {
        -Set~EventType~ hiddenTypes
        +toggleEventVisibility() void
    }
    
    %% ====================================================================
    %% DATA ACCESS LAYER (REPOSITORIES)
    %% ====================================================================
    
    class EventsRepository {
        +loadEvents() Future~List~Event~~
        +loadEventsWithCoordinates() Future~List~Event~~
    }
    
    class UsersRepository {
        +loadUsers() Future~List~User~~
    }
    
    class GroupsRepository {
        +loadGroups() Future~List~Group~~
    }
    
    %% ====================================================================
    %% SERVICE LAYER
    %% ====================================================================
    
    class RecentlyViewedService {
        -List~Event~ recentEvents
        +addEvent() void
    }
    
    %% ====================================================================
    %% DOMAIN MODELS
    %% ====================================================================
    
    class Event {
        -String id
        -String title
        -EventType type
        -EventLocation location
        -EventDateRange dateRange
        +bool hasCoordinates
    }
    
    class EventType {
        <<enumeration>>
        POINT
        PERIOD
        GROUPED
    }
    
    class EventLocation {
        -String name
        -double lat
        -double lng
    }
    
    class EventDateRange {
        -DateTime start
        -DateTime end
    }
    
    class User {
        -String id
        -String name
        -String role
    }
    
    class Group {
        -String id
        -String label
    }
    
    %% ====================================================================
    %% LAYER DEPENDENCIES (TOP TO BOTTOM)
    %% ====================================================================
    
    %% Presentation Layer uses Business Logic Layer
    MyApp --> NavigationBloc : uses
    MyApp --> EventVisibilityCubit : uses
    TimelinePage --> TimelineCubit : uses
    MapPage --> MapCubit : uses
    ComparisonPage --> ComparisonBloc : uses
    EventDetailsPanel --> NavigationBloc : uses
    
    %% Business Logic Layer uses Data Access Layer
    TimelineCubit --> EventsRepository : depends_on
    MapCubit --> EventsRepository : depends_on
    ComparisonBloc --> EventsRepository : depends_on
    ComparisonBloc --> RecentlyViewedService : depends_on
    EventVisibilityCubit --> EventsRepository : depends_on
    
    %% Business Logic Layer coordinates with each other
    TimelineCubit --> MapCubit : coordinates_with
    MapCubit --> NavigationBloc : coordinates_with
    NavigationBloc --> TimelineCubit : coordinates_with
    
    %% Data Access Layer returns Domain Models
    EventsRepository --> Event : returns
    UsersRepository --> User : returns
    GroupsRepository --> Group : returns
    RecentlyViewedService --> Event : stores
    
    %% Domain Model Compositions
    Event --> EventType : has
    Event --> EventLocation : contains
    Event --> EventDateRange : contains
    
    %% Cross-layer usage (Domain Models used throughout)
    TimelineCubit --> Event : manages
    MapCubit --> Event : manages
    ComparisonBloc --> Event : compares
    EventVisibilityCubit --> EventType : filters